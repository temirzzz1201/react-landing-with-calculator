import Gender from '../constants/Gender';

function monthDeathsElementCreator(age, value) {
  return {
    age,
    count: Math.round(value),
    value,
  };
}

/**
 * Таблица смертности
 * Листы "Таблица смернтоси" и "Таблица смертности по месяцам"
 */
export default class MortalityTable {
  
  get retirementDate() {
    return this.inputDataDI.pensionRetirement.retirementDate;
  }

  get pensionYear() {
    return this.retirementDate.year;
  }

  get monthsList() {
    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  }

  get ages() {
    return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];
  }
  
  get years() {
    return
  }
  
  get mans() {
    return [100000,99051,98975,98923,98882,98841,98805,98773,98741,98707,98678,98648,98624,98592,98549,98500,98432,98348,98246,98117,97964,97774,97574,97347,97097,96824,96520,96208,95852,95444,94987,94470,93930,93372,92758,92110,91433,90759,90082,89404,88718,87988,87297,86581,85790,84985,84109,83196,82250,81252,80189,79041,77891,76663,75335,73940,72449,70888,69242,67527,65764,63738,61754,59709,57493,55529,53199,51158,49005,46780,44769,42229,39905,37472,34915,32537,30077,27656,25259,23014,20773,18511,16432,14440,12537,10763,9183,7793,6581,5472,4551,3724,3008,2382,1813,1388,1059,796,577,413,318,100000,99226,99163,99119,99084,99050,99021,98995,98969,98941,98917,98892,98872,98846,98811,98770,98714,98644,98560,98453,98325,98169,98003,97815,97608,97380,97128,96868,96570,96228,95846,95414,94963,94494,93980,93438,92870,92305,91735,91164,90585,89970,89385,88775,88103,87415,86666,85883,85067,84204,83283,82280,81269,80186,79015,77785,76460,75070,73602,72070,70483,68636,66810,64906,62882,61009,58857,56921,54864,52753,50745,48286,45978,43536,40981,38539,35981,33436,30900,28481,26033,23539,21193,18918,16710,14617,12716,11006,9478,8057,6833,5709,4721,3827,3008,2367,1848,1424,1066,789,614,100000,99716,99687,99668,99653,99639,99628,99617,99606,99593,99583,99571,99560,99548,99535,99518,99497,99467,99427,99378,99323,99255,99183,99098,99004,98895,98770,98633,98481,98316,98141,97952,97760,97566,97368,97167,96950,96782,96607,96424,96228,95997,95775,95544,95300,95041,94750,94380,93984,93560,93112,92610,92096,91550,90978,90389,89732,88895,88014,87037,86147,84955,83625,82215,80724,79374,77661,75889,74012,71939,69947,67810,65367,62602,59663,56385,52710,48930,44847,40543,36098,32166,28553,25092,21786,18702,15958,13541,11436,9509,7908,6470,5227,4140,3150,2413,1841,1383,1003,718,552,100000,99734,99708,99689,99674,99661,99651,99641,99631,99620,99610,99599,99589,99578,99565,99549,99530,99501,99466,99420,99367,99306,99238,99161,99076,98977,98868,98749,98614,98462,98299,98121,97938,97745,97546,97342,97124,96932,96733,96530,96316,96081,95852,95607,95349,95072,94768,94413,94031,93624,93190,92695,92183,91634,91053,90453,89779,88997,88176,87292,86419,85285,84062,82737,81432,80073,78600,77055,75398,73676,71799,69854,67684,65252,62740,59949,56837,53621,50222,46643,42880,39334,35911,32554,29246,26056,23105,20388,17900,15548,13439,11460,9699,8045,6522,5272,4209,3324,2567,1963,1541,100000,99751,99727,99709,99694,99682,99673,99664,99655,99646,99637,99628,99619,99610,99598,99583,99565,99538,99508,99466,99415,99361,99298,99229,99152,99063,98971,98870,98751,98612,98461,98293,98119,97928,97728,97520,97301,97085,96861,96637,96405,96165,95928,95669,95396,95101,94784,94445,94077,93686,93266,92779,92269,91716,91125,90513,89822,89095,88334,87543,86688,85613,84497,83257,82141,80774,79546,78235,76806,75448,73692,71951,70073,68001,65959,63714,61251,58712,56167,53552,50783,47916,44957,42000,38997,36009,33137,30361,27671,25061,22481,19946,17649,15300,13167,11204,9342,7734,6336,5154,4130];
  }
  
  get womans() {
    return [100000,99227,99156,99111,99077,99051,99029,99005,98984,98963,98942,98923,98905,98886,98857,98825,98788,98744,98696,98637,98579,98523,98462,98397,98325,98245,98159,98064,97957,97835,97697,97536,97376,97198,97005,96813,96601,96387,96160,95930,95694,95443,95189,94921,94632,94327,94007,93673,93326,92944,92543,92112,91670,91190,90660,90117,89496,88835,88112,87360,86553,85651,84729,83738,82608,81557,80209,78966,77592,76109,74694,72816,71016,69008,66759,64453,61858,59040,55993,52938,49598,46056,42463,38715,34933,31103,27367,23794,20389,17048,14209,11514,9257,7220,5429,4030,2965,2116,1457,1013,705,100000,99380,99322,99286,99258,99236,99217,99198,99181,99164,99147,99131,99116,99100,99076,99050,99020,98984,98945,98897,98850,98804,98754,98701,98642,98576,98506,98428,98339,98238,98124,97992,97860,97714,97556,97398,97225,97050,96862,96671,96474,96265,96053,95827,95584,95327,95056,94772,94476,94152,93809,93442,93063,92653,92201,91735,91202,90626,89998,89342,88635,87850,87042,86167,85191,84246,83080,81968,80736,79425,78116,76452,74819,72988,70958,68839,66452,63849,61034,58166,55013,51655,48211,44590,40883,37082,33299,29545,25880,22259,19054,15911,13167,10620,8331,6432,4920,3669,2641,1895,1362,100000,99789,99768,99754,99744,99735,99727,99720,99713,99706,99700,99694,99688,99682,99674,99665,99653,99638,99621,99602,99582,99561,99541,99520,99494,99466,99433,99400,99362,99319,99275,99226,99178,99127,99072,99016,98955,98893,98827,98758,98686,98606,98528,98446,98358,98262,98156,98049,97935,97810,97677,97531,97378,97207,97026,96838,96525,96198,95847,95452,95084,94555,94056,93499,92904,92355,91508,90693,89785,88751,87692,86482,84990,83221,81192,78779,75937,72785,69136,65059,60487,56168,51785,47214,42602,37931,33375,29018,24866,20792,17329,14042,11289,8805,6621,4915,3617,2581,1777,1235,860,100000,99813,99793,99781,99772,99764,99756,99750,99744,99738,99732,99726,99720,99714,99706,99698,99687,99673,99658,99641,99623,99605,99588,99568,99545,99520,99492,99463,99427,99388,99346,99300,99253,99204,99151,99097,99039,98981,98914,98844,98770,98690,98611,98523,98430,98328,98216,98098,97974,97841,97696,97541,97376,97196,97004,96802,96522,96208,95873,95505,95133,94670,94208,93688,93164,92600,91909,91176,90359,89495,88507,87465,86217,84757,83152,81259,79067,76634,73889,70814,67351,63938,60399,56657,52772,48744,44655,40416,36173,31977,28093,24154,20557,17127,13993,11221,8911,6932,5208,3854,2858,100000,99837,99817,99807,99799,99791,99783,99778,99773,99768,99763,99758,99753,99748,99740,99732,99722,99709,99696,99681,99666,99651,99636,99618,99598,99575,99552,99527,99494,99459,99419,99376,99331,99283,99233,99180,99125,99070,99002,98931,98854,98774,98694,98599,98501,98394,98277,98149,98015,97874,97716,97552,97374,97186,96982,96765,96517,96216,95897,95556,95181,94785,94360,93877,93423,92844,92309,91658,90933,90241,89325,88453,87456,86313,85148,83801,82302,80653,78919,77004,74883,72640,70266,67762,65088,62288,59318,55802,52071,48523,44817,40748,36600,32440,28617,24654,21016,17700,14407,11309,8898];
  }

  get maxAges() {
    return Math.max(...this.ages);
  }
  
  get maxYear() {
    return Math.max(...this.years);
  }

  /**
   * Получение элемента статической таблицы смертности по индексу
   * @param { number } index 
   */
  getDeathsByIndex(index) {
    return {
      age: this.ages[index],
      year: this.years[index],
      mans: this.mans[index],
      womans: this.womans[index],
    }
  }

  /**
   * Получение элемента статической таблицы смертности по возрасту в определенный год
   * @param { number } year год
   * @param { number } age возраст
   */
  getDeathsByAge(year, age) {
    let result = null;
    this.years.forEach((elYear, index) => {
      if ((elYear === year) && (this.ages[index] === age)) {
        result = {
          age: this.ages[index],
          year: this.years[index],
          mans: this.mans[index],
          womans: this.womans[index],
        }
      }
    })
    return result;
  }

  /**
   * Таблица смертности по месяцам
   * =ЕСЛИ($A$1>=2020;СУММЕСЛИМН('таблица смертности'!$C:$C;'таблица смертности'!$B:$B;"2020";'таблица смертности'!$A:$A;A3);СУММЕСЛИМН('таблица смертности'!$C:$C;'таблица смертности'!$B:$B;$A$1;'таблица смертности'!$A:$A;A3))
   */
  get deathByMonths() {
    const maxYear = this.pensionYear >= this.maxYear ? this.maxYear : this.pensionYear;
    let result = {};
    const initValue = {
      mans: {
        0: this.getDeathsInitValues(maxYear, Gender.Man),
      },
      womans: {
        0: this.getDeathsInitValues(maxYear, Gender.Woman),
      },
      length: this.maxAges + 1,
    };
    result = Object.assign(initValue, result);
    this.monthsList.forEach((month) => {
      const val = this.getDeathsByMonth(month, initValue);
      result.mans = Object.assign(val.mans, result.mans);
      result.womans = Object.assign(val.womans, result.womans);
    });
    return result;
  }

  /**
   * Количеcтвенные значения смертности определенного возраста в определенный месяц
   * @param { number } age возраст
   * @param { number } month месяц
   * @param { Gender } type пол
   * @returns { number } значение смертности
   * TODO: Оптимизировать получение данных из таблицы
   */
  getDeathsByMonthAndAge(age, month, type) {
    const gender = type === Gender.Man ? 'mans' : 'womans';
    const [result] = this.deathByMonths[gender][month].filter((el) => el.age === age) || { count: 0 };
    if (result) {
      return result.count; 
    }
    return 0;
  }

  /**
   * Формирование начальных значений таблицы смертности по месяцам
   * @param { number } year год
   * @param { Gender } type пол
   */
  getDeathsInitValues(year, type) {
    let age = 0;
    return this.years.reduce((result, value, index) => {
      if (year === value) {
        if (type.id === Gender.Man.id) {
          result.push({
            age,
            count: this.mans[index],
          })
        } else {
          result.push({
            age,
            count: this.womans[index],
          });
        }
        age += 1;
      }
      return result;
    }, []);
  }

  /**
   * Формирование таблицы смертности в заданный месяц
   * @param { number } month месяц
   * @param { { mans: Object, womans: Object } } initValue начальное значение (значения нулевого месяца таблицы смертности)
   * @returns { { mans: Object, womans: Object } } значения смертности в заданный месяц
   */
  getDeathsByMonth(month, initValue) {
    const result = {
      mans: [],
      womans: [],
    };
    for (let i = 0; i < initValue.length; i++) {
      const current = this.getInitValueByAge(i, initValue);
      const next = this.getInitValueByAge(i + 1, initValue);
      const mansCount = current.mans.count;
      const womansCount = current.womans.count;
      if (!Array.isArray(result.mans[month])) {
        result.mans[month] = [];
      }
      if (!Array.isArray(result.womans[month])) {
        result.womans[month] = [];
      }
      const mansValue = mansCount - (mansCount - next.mans.count) / 12 * month;
      const womansValue = womansCount - (womansCount - next.womans.count) / 12 * month;
      result.mans[month].push(monthDeathsElementCreator(i, mansValue));
      result.womans[month].push(monthDeathsElementCreator(i, womansValue));
    }
    return result;
  }

  /**
   * Полученине начальных значений по возрасту
   * @param { number } age возраст
   * @param { { mans: Object, womans: Object } } initValue начальное значение (значения нулевого месяца таблицы смертности)
   * @returns 
   */
  getInitValueByAge(age, initValue) {
    return {
      mans: initValue.mans['0'].find((el) => el.age === age) || { age, count: 0 },
      womans: initValue.womans['0'].find((el) => el.age === age) || { age, count: 0 },
    }
  }

}